# name: Deploy to Amazon ECS Staging

# on:
#   push:
#     branches:
#       - staging
#   pull_request:
#     branches:
#       - staging
#   workflow_dispatch:
#     inputs:
#       environment:
#         description: 'Target environment (staging)'
#         required: true
#         default: 'staging'

# env:
#   AWS_REGION: eu-west-2
#   ECR_REPOSITORY: ecs-test
#   ECS_SERVICE: my-staging-service
#   ECS_CLUSTER: api-staging
#   ECS_TASK_DEFINITION_ARN: arn:aws:ecs:eu-west-2:385771716406:task-definition/my-task-def:1
#   ECS_TASK_DEFINITION: .aws/task-definition.json
#   CONTAINER_NAME: my-container
#   AWS_ROLE_ARN: arn:aws:iam::385771716406:role/test-github-actions-oidc-role

# permissions:
#   id-token: write
#   contents: read

# jobs:
#   validate:
#     name: Validate Code and Docker Build
#     runs-on: ubuntu-latest
#     if: github.event_name == 'pull_request'
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: ${{ env.AWS_ROLE_ARN }}
#           aws-region: ${{ env.AWS_REGION }}
#           role-session-name: GithubActionSession

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Build Docker Image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           cd blog
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

#   deploy:
#     runs-on: ubuntu-latest
#     needs: validate
#     if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: ${{ env.AWS_ROLE_ARN }}
#           aws-region: ${{ env.AWS_REGION }}
#           role-session-name: GithubActionSession

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Build, Tag, and Push Image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           cd blog
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

#       - name: Get Current Task Definition
#         id: get-task-def
#         run: |
#           aws ecs describe-task-definition \
#             --task-definition ${{ env.ECS_TASK_DEFINITION_ARN }} \
#             --query 'taskDefinition' > previous-task-definition.json
#           echo "previous_task_definition=previous-task-definition.json" >> $GITHUB_OUTPUT

#       - name: Update ECS Task Definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: ${{ env.ECS_TASK_DEFINITION }}
#           container-name: ${{ env.CONTAINER_NAME }}
#           image: ${{ steps.build-image.outputs.image }}

#       - name: Deploy Amazon ECS Task Definition
#         id: deploy
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v2
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: ${{ env.ECS_SERVICE }}
#           cluster: ${{ env.ECS_CLUSTER }}
#           wait-for-service-stability: true
#         continue-on-error: true

#       - name: Rollback on Failure
#         if: steps.deploy.outcome == 'failure'
#         run: |
#           echo "Deployment failed, rolling back to previous task definition"
#           PREVIOUS_TASK_ARN=$(aws ecs register-task-definition \
#             --cli-input-json file://${{ steps.get-task-def.outputs.previous_task_definition }} \
#             --query 'taskDefinition.taskDefinitionArn' --output text)
#           aws ecs update-service \
#             --cluster ${{ env.ECS_CLUSTER }} \
#             --service ${{ env.ECS_SERVICE }} \
#             --task-definition $PREVIOUS_TASK_ARN \
#             --force-new-deployment
#           aws ecs wait services-stable \
#             --cluster ${{ env.ECS_CLUSTER }} \
#             --services ${{ env.ECS_SERVICE }}