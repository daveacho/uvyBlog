name: Deploy to AWS ECS

on:
  push:
    branches:
      - main        # Deploy to production
      - staging     # Deploy to staging
  workflow_dispatch:  # Allow manual triggers

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: ecs-test
  AWS_ROLE_ARN: arn:aws:iam::385771716406:role/test-github-actions-oidc-role
  # ECS_SERVICE: uvyblog-dev-svc
  # ECS_CLUSTER: uvyblog-dev-cluster
  # ECS_TASK_DEFINITION_ARN: arn:aws:ecs:eu-west-2:385771716406:task-definition/my-task-def:1
  # ECS_TASK_DEFINITION: .aws/task-definition.json
  # CONTAINER_NAME: django_app
  # AWS_ROLE_ARN: arn:aws:iam::385771716406:role/test-github-actions-oidc-role

permissions:
  id-token: write
  contents: read


jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set environment variables
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "ECS_CLUSTER=uvyblog-dev-cluster" >> $GITHUB_ENV
          echo "ECS_SERVICE=uvyblog-dev-svc" >> $GITHUB_ENV
          echo "TASK_DEFINITION=uvyblog-dev-td" >> $GITHUB_ENV
          echo "CONTAINER_NAME=django_app" >> $GITHUB_ENV
        elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "ECS_CLUSTER=app-cluster" >> $GITHUB_ENV
          echo "ECS_SERVICE=app-service " >> $GITHUB_ENV
          echo "TASK_DEFINITION=app-task-definition" >> $GITHUB_ENV
          echo "CONTAINER_NAME=myContainer" >> $GITHUB_ENV
        fi

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GithubActionSession

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
        

    - name: Build, Tag, and Push Image to Amazon ECR
      id: build-image
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
      run: |
          cd blog
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$ENVIRONMENT-latest .

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$ENVIRONMENT-latest

          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download task definition
      id: get-task-def
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json || { echo "Task definition not found"; exit 1; }
        echo "previous_task_definition=task-definition.json" >> $GITHUB_OUTPUT

    - name: Update ECS Task Definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}      

    - name: Deploy Amazon ECS Task Definition
      id: deploy
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
      continue-on-error: true

    - name: Deployment notification
      run: |
        echo "ðŸš€ Successfully deployed to ${{ env.ENVIRONMENT }} environment!"
        echo "Image: ${{ steps.build-image.outputs.image }}"
        echo "Service: ${{ env.ECS_SERVICE }}"
        echo "Cluster: ${{ env.ECS_CLUSTER }}"

    - name: Rollback on Failure
      if: steps.deploy.outcome == 'failure'
      run: |
          echo "Deployment failed, rolling back to previous task definition"
          PREVIOUS_TASK_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://${{ steps.get-task-def.outputs.previous_task_definition }} \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition $PREVIOUS_TASK_ARN \
            --force-new-deployment
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}    
