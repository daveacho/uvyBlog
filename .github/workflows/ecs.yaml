# name: Deploy to Amazon ECS

# on:
#   push:
#     branches:
#       - main

# env:
#   AWS_REGION: eu-west-2
#   ECR_REPOSITORY: ecs-test
#   ECS_CLUSTER: my-ecs-cluster
#   ECS_SERVICE: my-ecs-service
#   CONTAINER_NAME: my-container
#   TASK_DEFINITION: ecs-task-def.json

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#       - name: Fill in the new image ID in the Amazon ECS task definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: ${{ env.TASK_DEFINITION }}
#           container-name: ${{ env.CONTAINER_NAME }}
#           image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

#       - name: Deploy Amazon ECS task definition
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: ${{ env.ECS_SERVICE }}
#           cluster: ${{ env.ECS_CLUSTER }}
#           wait-for-service-stability: true


# name: building and pushing docker iamges to ecr

# on:
#   push:
#     branches:
#       - main
  
# env:
#   AWS_REGISTRY: 385771716406.dkr.ecr.eu-west-2.amazonaws.com
#   AWS_REPOSITORY: ecs-test
#   AWS_REGION: eu-west-2
# jobs:
#   dockerization:
#     runs-on: ubuntu-latest
#     steps:
#       - name: checkout code 
#         uses: actions/checkout@v3

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: login to aws ecr
#         run: |
#           aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 385771716406.dkr.ecr.eu-west-2.amazonaws.com

#       - name:
#         env:
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           cd blog
#           docker build -t $AWS_REGISTRY/$AWS_REPOSITORY:$IMAGE_TAG .
#           docker push $AWS_REGISTRY/$AWS_REPOSITORY:$IMAGE_TAG


name: Deploy to Amazon ECS with Rollback
on:
  push:
    branches:
      - main
env:
  AWS_REGION: eu-west-2 # Replace with your AWS region
  ECR_REPOSITORY: ecs-test # Replace with your ECR repository name
  ECS_SERVICE: uvyblog-dev-svc # Replace with your ECS service name
  ECS_CLUSTER: uvyblog-dev-cluster # Replace with your ECS cluster name
  ECS_TASK_DEFINITION_ARN: arn:aws:ecs:eu-west-2:385771716406:task-definition/uvyblog-dev-td:9
  ECS_TASK_DEFINITION: .aws/task-definition.json # Path to your ECS task definition file
  CONTAINER_NAME: django_app # Replace with the container name in your task definition
permissions:
  id-token: write # Required for OIDC to request the GitHub JWT
  contents: read # Required for checking out the repository
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
#    environment: production # Optional: specify your deployment environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # Updated to latest stable version
        with:
          role-to-assume: arn:aws:iam::385771716406:role/github_action_role # Replace with your IAM role ARN
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsSession

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd blog
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Get current task definition
        id: get-task-def
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION_ARN }} \
            --query 'taskDefinition' > previous-task-definition.json
          echo "previous_task_definition=previous-task-definition.json" >> $GITHUB_OUTPUT

      - name: Test output
        run: |
          echo ${{ steps.get-task-def.outputs.previous_task_definition }}
          cat ${{ steps.get-task-def.outputs.previous_task_definition }}
          
      - name: Update task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Debug updated task definition
        run: |
          echo "Task definition path: ${{ steps.task-def.outputs.task-definition }}"
          cat ${{ steps.task-def.outputs.task-definition }}

      - name: Deploy to Amazon ECS
        id: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
        continue-on-error: true # Allow rollback step to run if deployment fails

      - name: Rollback on failure
        if: steps.deploy.outcome == 'failure'
        run: |
          echo "Deployment failed, rolling back to previous task definition"
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition $(aws ecs register-task-definition \
              --cli-input-json file://${{ steps.get-task-def.outputs.previous_task_definition }} \
              --query 'taskDefinition.taskDefinitionArn' --output text) \
            --force-new-deployment
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}