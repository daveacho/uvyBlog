# name: Deploy to Amazon ECS

# on:
#   push:
#     branches:
#       - staging
#       - main
#   pull_request:
#     branches:
#       - staging
#       - main
#   workflow_dispatch:
#     inputs:
#       environment:
#         description: 'Target environment (staging, prod)'
#         required: true
#         default: 'staging'
#         type: choice
#         options:
#           - staging
#           - prod

# env:
#   AWS_REGION: eu-west-2
#   TASK_DEFINITION_PATH: .aws/task-definition.json

# permissions:
#   id-token: write
#   contents: read

# jobs:
#   validate:
#     name: Validate Code and Docker Build
#     runs-on: ubuntu-latest
#     if: github.event_name == 'pull_request'
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.10'

#       - name: Install Dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt
#           pip install flake8

#       - name: Run Linting
#         run: |
#           flake8 . --max-line-length=120 --exclude=venv

#       - name: Run Tests
#         run: |
#           python manage.py test

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
#           aws-region: ${{ env.AWS_REGION }}
#           role-session-name: GithubActionSessions

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Build Docker Image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           docker build -t $ECR_REGISTRY/api-staging-ecr:$IMAGE_TAG .

#   deploy:
#     name: Deploy to ${{ github.event.inputs.environment || github.ref_name }}
#     runs-on: ubuntu-latest
#     needs: validate
#     if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' && (github.ref_name == 'staging' || github.ref_name == 'main') }}
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Set Environment Variables
#         run: |
#           if [[ "${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || github.ref_name }}" == "staging" ]]; then
#             echo "ENVIRONMENT=staging" >> $GITHUB_ENV
#             echo "ECS_CLUSTER=api-staging" >> $GITHUB_ENV
#             echo "ECS_SERVICE=my-staging-service" >> $GITHUB_ENV
#             echo "ECR_REPOSITORY=api-staging-ecr" >> $GITHUB_ENV
#             echo "CONTAINER_NAME=my-staging-container" >> $GITHUB_ENV
#           elif [[ "${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || github.ref_name }}" == "main" || "${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment }}" == "prod" ]]; then
#             echo "ENVIRONMENT=prod" >> $GITHUB_ENV
#             echo "ECS_CLUSTER=api-prod" >> $GITHUB_ENV
#             echo "ECS_SERVICE=my-prod-service" >> $GITHUB_ENV
#             echo "ECR_REPOSITORY=api-prod-ecr" >> $GITHUB_ENV
#             echo "CONTAINER_NAME=my-prod-container" >> $GITHUB_ENV
#           fi

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
#           aws-region: ${{ env.AWS_REGION }}
#           role-session-name: GithubActionSessions

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Build, Tag, and Push Image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
#           echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

#       - name: Get Current Task Definition
#         id: get-task-def
#         run: |
#           TASK_FAMILY=$(jq -r '.family' ${{ env.TASK_DEFINITION_PATH }})
#           aws ecs describe-task-definition \
#             --task-definition $TASK_FAMILY \
#             --query taskDefinition > previous-task-definition.json
#           echo "previous_task_definition=previous-task-definition.json" >> $GITHUB_OUTPUT

#       - name: Update ECS Task Definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: ${{ env.TASK_DEFINITION_PATH }}
#           container-name: ${{ env.CONTAINER_NAME }}
#           image: ${{ steps.build-image.outputs.image }}

#       - name: Debug Updated ECS Task Definition
#         run: |
#           echo "Task definition path: ${{ steps.task-def.outputs.task-definition }}"
#           cat ${{ steps.task-def.outputs.task-definition }}

#       - name: Deploy Amazon ECS Task Definition
#         id: deploy
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v2
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: ${{ env.ECS_SERVICE }}
#           cluster: ${{ env.ECS_CLUSTER }}
#           wait-for-service-stability: true
#         continue-on-error: true

#       - name: Rollback on Failure
#         if: steps.deploy.outcome == 'failure'
#         run: |
#           echo "Deployment failed, rolling back to previous task definition"
#           PREV_TASK_ARN=$(aws ecs register-task-definition \
#             --cli-input-json file://${{ steps.get-task-def.outputs.previous_task_definition }} \
#             --query 'taskDefinition.taskDefinitionArn' --output text)
#           aws ecs update-service \
#             --cluster ${{ env.ECS_CLUSTER }} \
#             --service ${{ env.ECS_SERVICE }} \
#             --task-definition $PREV_TASK_ARN \
#             --force-new-deployment
#           aws ecs wait services-stable \
#             --cluster ${{ env.ECS_CLUSTER }} \
#             --services ${{ env.ECS_SERVICE }}
#           echo "Rollback completed to $PREV_TASK_ARN"

#       - name: Notify on Success
#         if: steps.deploy.outcome == 'success'
#         run: |
#           echo "Deployment to ${{ env.ENVIRONMENT }} succeeded!"

#       - name: Notify on Failure
#         if: failure()
#         run: |
#           echo "Deployment to ${{ env.ENVIRONMENT }} failed and rollback completed."
#           # Add Slack/email notification here (e.g., slackapi/slack-github-action)


# ######################################################################################

# name: Deploy to Amazon ECS

# on:
#   push:
#     branches:
#       - staging
#       - main
#   pull_request:
#     branches:
#       - staging
#       - main
#   workflow_dispatch:
#     inputs:
#       environment:
#         description: 'Target environment (staging, prod)'
#         required: true
#         default: 'staging'
#         type: choice
#         options:
#           - staging
#           - main

# env:
#   AWS_REGION: eu-west-2
#   AWS_ROLE_ARN: arn:aws:iam::385771716406:role/test-github-actions-oidc-role
#   TASK_DEFINITION_PATH: .aws/task-definition.json 
#   STAGING_ECR_REPOSITORY: ecs-test

# permissions:
#   id-token: write
#   contents: read

# jobs:
#   validate:
#     name: Validate Code and Docker Build
#     runs-on: ubuntu-latest
#     if: github.event_name == 'pull_request'
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: ${{ env.AWS_ROLE_ARN }}
#           aws-region: ${{ env.AWS_REGION }}
#           role-session-name: GithubActionSessions

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Build Docker Image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           cd blog
#           docker build -t $ECR_REGISTRY/$STAGING_ECR_REPOSITORY:$IMAGE_TAG .

#   deploy:
#     name: Deploy to ${{ matrix.environment || github.event.inputs.environment }}
#     runs-on: ubuntu-latest
#     needs: validate
#     strategy:
#       matrix:
#         environment:
#           - staging
#           - prod
       
#         include:
#           - environment: staging
#             ecs_cluster: api-staging
#             ecs_service: my-staging-service
#             ecr_repository: ecs-test
#             container_name: my-container
#           - environment: prod
#             ecs_cluster: uvyblog-dev-cluster
#             ecs_service: uvyblog-dev-svc
#             ecr_repository: ecs-test
#             container_name: django_app
#       fail-fast: false
#     # if: |
#     #   (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == matrix.environment) ||
#     #   (github.event_name == 'push' && (
#     #     (matrix.environment == 'staging' && github.ref_name == 'staging') ||
#     #     (matrix.environment == 'prod' && github.ref_name == 'main')
#     #   ))
#     # if: >
#     #   ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment == matrix.environment ||
#     #   github.event_name == 'push' && (
#     #     (matrix.environment == 'staging' && github.ref_name == 'staging') ||
#     #     (matrix.environment == 'prod' && github.ref_name == 'main')
#     #   ) }}
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: ${{ env.AWS_ROLE_ARN }}
#           aws-region: ${{ env.AWS_REGION }}
#           role-session-name: GithubActionSessions

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Build, Tag, and Push Image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           cd blog
#           docker build -t $ECR_REGISTRY/$STAGING_ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$STAGING_ECR_REPOSITORY:$IMAGE_TAG
#           echo "image=$ECR_REGISTRY/$STAGING_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

#       # - name: Get the current task definition
#       #   id: get-task-def
#       #   run: |
#       #     aws ecs describe-task-definition \
#       #     --task-definition ${{ env.ECS_TASK_DEFINITION_ARN }} \
#       #     --query 'taskdefinition' > previous-task-definition.json
#       #     echo "previous_task_definition=previous-task-definition.json" >> $GITHUB_OUTPUT

#       - name: Get Current Task Definition
#         id: get-task-def
#         run: |
#           TASK_FAMILY=$(jq -r '.family' ${{ env.TASK_DEFINITION_PATH }})
#           aws ecs describe-task-definition \
#             --task-definition $TASK_FAMILY \
#             --query taskDefinition > previous-task-definition.json
#           echo "previous_task_definition=previous-task-definition.json" >> $GITHUB_OUTPUT

#       - name: Update ECS Task Definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: task-definition.json
#           container-name: ${{ matrix.container_name }}
#           image: ${{ steps.build-image.outputs.image }}

#       - name: Debug Updated ECS Task Definition
#         run: |
#           echo "Task definition path: ${{ steps.task-def.outputs.task-definition }}"
#           cat ${{ steps.task-def.outputs.task-definition }}

#       - name: Deploy Amazon ECS Task Definition
#         id: deploy
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v2
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: ${{ matrix.ecs_service }}
#           cluster: ${{ matrix.ecs_cluster }}
#           wait-for-service-stability: true
#         continue-on-error: true

#       - name: Rollback on Failure
#         if: steps.deploy.outcome == 'failure'
#         run: |
#           echo "Deployment failed, rolling back to previous task definition"
#           PREV_TASK_ARN=$(aws ecs register-task-definition \
#             --cli-input-json file://${{ steps.get-task-def.outputs.previous_task_definition }} \
#             --query 'taskDefinition.taskDefinitionArn' --output text)
#           aws ecs update-service \
#             --cluster ${{ matrix.ecs_cluster }} \
#             --service ${{ matrix.ecs_service }} \
#             --task-definition $PREV_TASK_ARN \
#             --force-new-deployment
#           aws ecs wait services-stable \
#             --cluster ${{ matrix.ecs_cluster }} \
#             --services ${{ matrix.ecs_service }}
#           echo "Rollback completed to $PREV_TASK_ARN"

#       - name: Notify on Success
#         if: steps.deploy.outcome == 'success'
#         run: |
#           echo "Deployment to ${{ matrix.environment }} succeeded!"

#       - name: Notify on Failure
#         if: failure()
#         run: |
#           echo "Deployment to ${{ matrix.environment }} failed and rollback completed."
#           # Add Slack/email notification here (e.g., slackapi/slack-github-action)


# ##########################################################################################newer
# name: Deploy to Amazon ECS

# on:
#   push:
#     branches:
#       - staging
#       - main
#   pull_request:
#     branches:
#       - staging
#       - main
#   workflow_dispatch:
#     inputs:
#       environment:
#         description: 'Target environment (staging, prod)'
#         required: true
#         default: 'staging'
#         type: choice
#         options:
#           - staging
#           - main

# env:
#   AWS_REGION: eu-west-2
#   AWS_ROLE_ARN: arn:aws:iam::385771716406:role/test-github-actions-oidc-role
#   TASK_DEFINITION_PATH: .aws/task-definition.json 
#   STAGING_ECR_REPOSITORY: ecs-test

# permissions:
#   id-token: write
#   contents: read

# jobs:
#   validate:
#     name: Validate Code and Docker Build
#     runs-on: ubuntu-latest
#     if: github.event_name == 'pull_request'
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: ${{ env.AWS_ROLE_ARN }}
#           aws-region: ${{ env.AWS_REGION }}
#           role-session-name: GithubActionSessions

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Build Docker Image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           cd blog
#           docker build -t $ECR_REGISTRY/$STAGING_ECR_REPOSITORY:$IMAGE_TAG .

#   deploy:
#     name: Deploy to ${{ matrix.environment || github.event.inputs.environment }}
#     runs-on: ubuntu-latest
#     needs: validate
#     strategy:
#       matrix:
#         environment:
#           - staging
#           - prod

#         include:
#           - environment: staging
#             ecs_cluster: api-staging
#             ecs_service: my-staging-service
#             ecr_repository: ecs-test
#             container_name: my-container
#           - environment: prod
#             ecs_cluster: uvyblog-dev-cluster
#             ecs_service: uvyblog-dev-svc
#             ecr_repository:  ecs-test
#             container_name: django_app
#       fail-fast: false
#     if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment == matrix.environment || github.event_name == 'push' && (matrix.environment == 'staging' && github.ref_name == 'staging' || matrix.environment == 'prod' && github.ref_name == 'main') }}
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: ${{ env.AWS_ROLE_ARN }}
#           aws-region: ${{ env.AWS_REGION }}
#           role-session-name: GithubActionSessions

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Build, Tag, and Push Image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           cd blog
#           docker build -t $ECR_REGISTRY/${{ matrix.ecr_repository }}:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/${{ matrix.ecr_repository }}:$IMAGE_TAG
#           echo "image=$ECR_REGISTRY/${{ matrix.ecr_repository }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

#       - name: Get Current Task Definition
#         id: get-task-def
#         run: |
#           TASK_FAMILY=$(jq -r '.family' ${{ env.TASK_DEFINITION_PATH }})
#           aws ecs describe-task-definition \
#             --task-definition $TASK_FAMILY \
#             --query taskDefinition > previous-task-definition.json
#           echo "previous_task_definition=previous-task-definition.json" >> $GITHUB_OUTPUT

#       - name: Update ECS Task Definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: ${{ env.TASK_DEFINITION_PATH }}
#           container-name: ${{ matrix.container_name }}
#           image: ${{ steps.build-image.outputs.image }}

#       - name: Debug Updated ECS Task Definition
#         run: |
#           echo "Task definition path: ${{ steps.task-def.outputs.task-definition }}"
#           cat ${{ steps.task-def.outputs.task-definition }}

#       - name: Deploy Amazon ECS Task Definition
#         id: deploy
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v2
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: ${{ matrix.ecs_service }}
#           cluster: ${{ matrix.ecs_cluster }}
#           wait-for-service-stability: true
#         continue-on-error: true

#       - name: Rollback on Failure
#         if: steps.deploy.outcome == 'failure'
#         run: |
#           echo "Deployment failed, rolling back to previous task definition"
#           PREV_TASK_ARN=$(aws ecs register-task-definition \
#             --cli-input-json file://${{ steps.get-task-def.outputs.previous_task_definition }} \
#             --query 'taskDefinition.taskDefinitionArn' --output text)
#           aws ecs update-service \
#             --cluster ${{ matrix.ecs_cluster }} \
#             --service ${{ matrix.ecs_service }} \
#             --task-definition $PREV_TASK_ARN \
#             --force-new-deployment
#           aws ecs wait services-stable \
#             --cluster ${{ matrix.ecs_cluster }} \
#             --services ${{ matrix.ecs_service }}
#           echo "Rollback completed to $PREV_TASK_ARN"

#       - name: Notify on Success
#         if: steps.deploy.outcome == 'success'
#         run: |
#           echo "Deployment to ${{ matrix.environment }} succeeded!"

#       - name: Notify on Failure
#         if: failure()
#         run: |
#           echo "Deployment to ${{ matrix.environment }} failed and rollback completed."
#           # Add Slack/email notification here (e.g., slackapi/slack-github-action)

# ###########################################################################################
# # name: Deploy to Amazon ECS

# # on:
# #   push:
# #     branches:
# #       - staging
# #       - main
# #   pull_request:
# #     branches:
# #       - staging
# #       - main
# #   workflow_dispatch:
# #     inputs:
# #       environment:
# #         description: 'Target environment (staging, prod)'
# #         required: true
# #         default: 'staging'
# #         type: choice
# #         options:
# #           - staging
# #           - prod

# # env:
# #   AWS_REGION: eu-west-2
# #   TASK_DEFINITION_PATH: .aws/task-definition.json

# # permissions:
# #   id-token: write
# #   contents: read

# # jobs:
# #   validate:
# #     name: Validate Code and Docker Build
# #     runs-on: ubuntu-latest
# #     if: github.event_name == 'pull_request'
# #     steps:
# #       - name: Checkout
# #         uses: actions/checkout@v4

# #       - name: Set up Python
# #         uses: actions/setup-python@v5
# #         with:
# #           python-version: '3.10'

# #       - name: Install Dependencies
# #         run: |
# #           python -m pip install --upgrade pip
# #           pip install -r requirements.txt
# #           pip install flake8

# #       - name: Run Linting
# #         run: |
# #           flake8 . --max-line-length=120 --exclude=venv

# #       - name: Run Tests
# #         run: |
# #           python manage.py test

# #       - name: Configure AWS Credentials
# #         uses: aws-actions/configure-aws-credentials@v4
# #         with:
# #           role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
# #           aws-region: ${{ env.AWS_REGION }}
# #           role-session-name: GithubActionSessions

# #       - name: Login to Amazon ECR
# #         id: login-ecr
# #         uses: aws-actions/amazon-ecr-login@v2

# #       - name: Build Docker Image
# #         env:
# #           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
# #           IMAGE_TAG: ${{ github.sha }}
# #         run: |
# #           docker build -t $ECR_REGISTRY/api-staging-ecr:$IMAGE_TAG .

# #   deploy:
# #     name: Deploy to ${{ matrix.environment || github.event.inputs.environment }}
# #     runs-on: ubuntu-latest
# #     needs: validate
# #     strategy:
# #       matrix:
# #         environment:
# #           - staging
# #           - prod
# #         include:
# #           - environment: staging
# #             ecs_cluster: api-staging
# #             ecs_service: my-staging-service
# #             ecr_repository: api-staging-ecr
# #             container_name: my-staging-container
# #           - environment: prod
# #             ecs_cluster: api-prod
# #             ecs_service: my-prod-service
# #             ecr_repository: api-prod-ecr
# #             container_name: my-prod-container
# #       fail-fast: false
# #     if: >
# #       ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment == matrix.environment ||
# #       github.event_name == 'push' && (
# #         (matrix.environment == 'staging' && github.ref_name == 'staging') ||
# #         (matrix.environment == 'prod' && github.ref_name == 'main')
# #       ) }}
# #     steps:
# #       - name: Checkout
# #         uses: actions/checkout@v4

# #       - name: Configure AWS Credentials
# #         uses: aws-actions/configure-aws-credentials@v4
# #         with:
# #           role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
# #           aws-region: ${{ env.AWS_REGION }}
# #           role-session-name: GithubActionSessions

# #       - name: Login to Amazon ECR
# #         id: login-ecr
# #         uses: aws-actions/amazon-ecr-login@v2

# #       - name: Build, Tag, and Push Image to Amazon ECR
# #         id: build-image
# #         env:
# #           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
# #           IMAGE_TAG: ${{ github.sha }}
# #         run: |
# #           docker build -t $ECR_REGISTRY/${{ matrix.ecr_repository }}:$IMAGE_TAG .
# #           docker push $ECR_REGISTRY/${{ matrix.ecr_repository }}:$IMAGE_TAG
# #           echo "image=$ECR_REGISTRY/${{ matrix.ecr_repository }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

# #       - name: Get Current Task Definition
# #         id: get-task-def
# #         run: |
# #           TASK_FAMILY=$(jq -r '.family' ${{ env.TASK_DEFINITION_PATH }})
# #           aws ecs describe-task-definition \
# #             --task-definition $TASK_FAMILY \
# #             --query taskDefinition > previous-task-definition.json
# #           echo "previous_task_definition=previous-task-definition.json" >> $GITHUB_OUTPUT

# #       - name: Update ECS Task Definition
# #         id: task-def
# #         uses: aws-actions/amazon-ecs-render-task-definition@v1
# #         with:
# #           task-definition: ${{ env.TASK_DEFINITION_PATH }}
# #           container-name: ${{ matrix.container_name }}
# #           image: ${{ steps.build-image.outputs.image }}

# #       - name: Debug Updated ECS Task Definition
# #         run: |
# #           echo "Task definition path: ${{ steps.task-def.outputs.task-definition }}"
# #           cat ${{ steps.task-def.outputs.task-definition }}

# #       - name: Deploy Amazon ECS Task Definition
# #         id: deploy
# #         uses: aws-actions/amazon-ecs-deploy-task-definition@v2
# #         with:
# #           task-definition: ${{ steps.task-def.outputs.task-definition }}
# #           service: ${{ matrix.ecs_service }}
# #           cluster: ${{ matrix.ecs_cluster }}
# #           wait-for-service-stability: true
# #         continue-on-error: true

# #       - name: Rollback on Failure
# #         if: steps.deploy.outcome == 'failure'
# #         run: |
# #           echo "Deployment failed, rolling back to previous task definition"
# #           PREV_TASK_ARN=$(aws ecs register-task-definition \
# #             --cli-input-json file://${{ steps.get-task-def.outputs.previous_task_definition }} \
# #             --query 'taskDefinition.taskDefinitionArn' --output text)
# #           aws ecs update-service \
# #             --cluster ${{ matrix.ecs_cluster }} \
# #             --service ${{ matrix.ecs_service }} \
# #             --task-definition $PREV_TASK_ARN \
# #             --force-new-deployment
# #           aws ecs wait services-stable \
# #             --cluster ${{ matrix.ecs_cluster }} \
# #             --services ${{ matrix.ecs_service }}
# #           echo "Rollback completed to $PREV_TASK_ARN"

# #       - name: Notify on Success
# #         if: steps.deploy.outcome == 'success'
# #         run: |
# #           echo "Deployment to ${{ matrix.environment }} succeeded!"

# #       - name: Notify on Failure
# #         if: failure()
# #         run: |
# #           echo "Deployment to ${{ matrix.environment }} failed and rollback completed."
# #           # Add Slack/email notification here (e.g., slackapi/slack-github-action)

# ## # ############################################################################################

# #   name: Deploy to Amazon ECS

# # on:
# #   push:
# #     branches:
# #       - staging
# #       - main
# #   pull_request:
# #     branches:
# #       - staging
# #       - main
# #   workflow_dispatch:
# #     inputs:
# #       environment:
# #         description: 'Target environment (staging, prod)'
# #         required: true
# #         default: 'staging'
# #         type: choice
# #         options:
# #           - staging
# #           - prod

# # env:
# #   AWS_REGION: eu-west-2
# #   TASK_DEFINITION_PATH: .aws/task-definition.json

# # permissions:
# #   id-token: write
# #   contents: read

# # jobs:
# #   validate:
# #     name: Validate Code and Docker Build
# #     runs-on: ubuntu-latest
# #     if: github.event_name == 'pull_request'
# #     steps:
# #       - name: Checkout
# #         uses: actions/checkout@v4

# #       - name: Set up Python
# #         uses: actions/setup-python@v5
# #         with:
# #           python-version: '3.10'

# #       - name: Install Dependencies
# #         run: |
# #           python -m pip install --upgrade pip
# #           pip install -r requirements.txt
# #           pip install flake8 pytest

# #       - name: Run Linting
# #         run: |
# #           flake8 . --max-line-length=120 --exclude=venv

# #       - name: Run Tests
# #         run: |
# #           python manage.py test

# #       - name: Configure AWS Credentials
# #         uses: aws-actions/configure-aws-credentials@v4
# #         with:
# #           role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
# #           aws-region: ${{ env.AWS_REGION }}
# #           role-session-name: GithubActionSessions

# #       - name: Login to Amazon ECR
# #         id: login-ecr
# #         uses: aws-actions/amazon-ecr-login@v2

# #       - name: Build Docker Image
# #         env:
# #           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
# #           IMAGE_TAG: ${{ github.sha }}
# #         run: |
# #           docker build -t $ECR_REGISTRY/${{ secrets.STAGING_ECR_REPOSITORY }}:$IMAGE_TAG .

# #   deploy:
# #     name: Deploy to ${{ matrix.environment || github.event.inputs.environment }}
# #     runs-on: ubuntu-latest
# #     needs: validate
# #     strategy:
# #       matrix:
# #         environment:
# #           - staging
# #           - prod
# #         include:
# #           - environment: staging
# #             ecs_cluster: ${{ secrets.STAGING_CLUSTER_NAME }}
# #             ecs_service: ${{ secrets.STAGING_SERVICE_NAME }}
# #             ecr_repository: ${{ secrets.STAGING_ECR_REPOSITORY }}
# #             container_name: ${{ secrets.STAGING_CONTAINER_NAME }}
# #           - environment: prod
# #             ecs_cluster: ${{ secrets.PROD_CLUSTER_NAME }}
# #             ecs_service: ${{ secrets.PROD_SERVICE_NAME }}
# #             ecr_repository: ${{ secrets.PROD_ECR_REPOSITORY }}
# #             container_name: ${{ secrets.PROD_CONTAINER_NAME }}
# #       fail-fast: false
# #     if: |
# #       (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == matrix.environment) ||
# #       (github.event_name == 'push' && (
# #         (matrix.environment == 'staging' && github.ref_name == 'staging') ||
# #         (matrix.environment == 'prod' && github.ref_name == 'main')
# #       ))
# #     steps:
# #       - name: Checkout
# #         uses: actions/checkout@v4

# #       - name: Configure AWS Credentials
# #         uses: aws-actions/configure-aws-credentials@v4
# #         with:
# #           role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
# #           aws-region: ${{ env.AWS_REGION }}
# #           role-session-name: GithubActionSessions

# #       - name: Login to Amazon ECR
# #         id: login-ecr
# #         uses: aws-actions/amazon-ecr-login@v2

# #       - name: Build, Tag, and Push Image to Amazon ECR
# #         id: build-image
# #         env:
# #           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
# #           IMAGE_TAG: ${{ github.sha }}
# #         run: |
# #           docker build -t $ECR_REGISTRY/${{ matrix.ecr_repository }}:$IMAGE_TAG .
# #           docker push $ECR_REGISTRY/${{ matrix.ecr_repository }}:$IMAGE_TAG
# #           echo "image=$ECR_REGISTRY/${{ matrix.ecr_repository }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

# #       - name: Get Current Task Definition
# #         id: get-task-def
# #         run: |
# #           TASK_FAMILY=$(jq -r '.family' ${{ env.TASK_DEFINITION_PATH }})
# #           aws ecs describe-task-definition \
# #             --task-definition $TASK_FAMILY \
# #             --query taskDefinition > previous-task-definition.json
# #           echo "previous_task_definition=previous-task-definition.json" >> $GITHUB_OUTPUT

# #       - name: Update ECS Task Definition
# #         id: task-def
# #         uses: aws-actions/amazon-ecs-render-task-definition@v1
# #         with:
# #           task-definition: ${{ env.TASK_DEFINITION_PATH }}
# #           container-name: ${{ matrix.container_name }}
# #           image: ${{ steps.build-image.outputs.image }}

# #       - name: Debug Updated ECS Task Definition
# #         run: |
# #           echo "Task definition path: ${{ steps.task-def.outputs.task-definition }}"
# #           cat ${{ steps.task-def.outputs.task-definition }}

# #       - name: Deploy Amazon ECS Task Definition
# #         id: deploy
# #         uses: aws-actions/amazon-ecs-deploy-task-definition@v2
# #         with:
# #           task-definition: ${{ steps.task-def.outputs.task-definition }}
# #           service: ${{ matrix.ecs_service }}
# #           cluster: ${{ matrix.ecs_cluster }}
# #           wait-for-service-stability: true
# #         continue-on-error: true

# #       - name: Rollback on Failure
# #         if: steps.deploy.outcome == 'failure'
# #         run: |
# #           echo "Deployment failed, rolling back to previous task definition"
# #           PREV_TASK_ARN=$(aws ecs register-task-definition \
# #             --cli-input-json file://${{ steps.get-task-def.outputs.previous_task_definition }} \
# #             --query 'taskDefinition.taskDefinitionArn' --output text)
# #           aws ecs update-service \
# #             --cluster ${{ matrix.ecs_cluster }} \
# #             --service ${{ matrix.ecs_service }} \
# #             --task-definition $PREV_TASK_ARN \
# #             --force-new-deployment
# #           aws ecs wait services-stable \
# #             --cluster ${{ matrix.ecs_cluster }} \
# #             --services ${{ matrix.ecs_service }}
# #           echo "Rollback completed to $PREV_TASK_ARN"

# #       - name: Notify on Success
# #         if: steps.deploy.outcome == 'success'
# #         run: |
# #           echo "Deployment to ${{ matrix.environment }} succeeded!"

# #       - name: Notify on Failure
# #         if: failure()
# #         run: |
# #           echo "Deployment to ${{ matrix.environment }} failed and rollback completed."
# #           # Add Slack/email notification here (e.g., slackapi/slack-github-action)
